"use strict";

// Modo Ligth/Dark
const toggleSwitch = document.querySelector(
    '.theme-switch input[type="checkbox"]'
);
const currentTheme = localStorage.getItem("theme");

if (toggleSwitch) {
    if (currentTheme) {
        document.documentElement.setAttribute("data-theme", currentTheme);

        if (currentTheme === "dark") {
            toggleSwitch.checked = true;
        }
    }

    function switchTheme(e) {
        if (e.target.checked) {
            document.documentElement.setAttribute("data-theme", "dark");
            localStorage.setItem("theme", "dark");
        } else {
            document.documentElement.setAttribute("data-theme", "light");
            localStorage.setItem("theme", "light");
        }
    }
    toggleSwitch.addEventListener("change", switchTheme, false);
}

function isValidURL(string) {
    let expression = /^(ftp|http|https):\/\/[^ "]+$/;
    let regex = new RegExp(expression);

    if (!regex.test(string)) {
        return false;
    }

    return true;
}

function debouncedSearch(func, wait, immediate) {
    let timeout;
    return function executedFunction() {
        let context = this;
        let args = arguments;
        let later = function () {
            timeout = null;
            if (!immediate) func.apply(context, args);
        };
        let callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
    };
}

// Classe for Hide/Show Navbar.
function hideShowNavbar() {
    var prev = 0;
    var $window = $(window);
    var navBar = $("#mainNav");
    var navGturmas = $(".nav-gestao-turmas");
    var navGeneral = $(".nav-gestao-geral");

    $window.on("scroll", function () {
        var scrollTop = $window.scrollTop();
        navBar.toggleClass("hiddenNavBarUP", scrollTop > prev); //Navbar scrollable
        navBar.toggleClass("hiddenNavBarDown", scrollTop < prev); //Navbar scrollable

        navGturmas.toggleClass("navGturmasUP", scrollTop > prev); //Navbar scrollable
        navGturmas.toggleClass("navGturmasDown", scrollTop < prev); //Navbar scrollable

        navGeneral.toggleClass("navGeneralUP", scrollTop > prev); //Navbar scrollable
        navGeneral.toggleClass("navGeneralDown", scrollTop < prev); //Navbar scrollable

        // aplica o fixed e styles especifica para a pagina de turmas
        if (scrollTop > 32) {
            $(".nav-gestao-turmas").addClass("active-min-turmas");
        } else {
            $(".nav-gestao-turmas").removeClass("active-min-turmas");
        }

        if (scrollTop > 32) {
            $(".nav-gestao-geral").addClass("active-min-geral");
        } else {
            $(".nav-gestao-geral").removeClass("active-min-geral");
        }

        prev = scrollTop;
    });
}

// Adiciona um contador de caracteres aos campos com a Class="contador-caracteres"
let componentContCaracteres = ".contador-caracteres";
let mostraCaracteres = "mostra-caracteres";

$(componentContCaracteres).focusin(function () {
    $(componentContCaracteres)
        .parent()
        .append("<small class=" + mostraCaracteres + "></small>");
});
$(componentContCaracteres).focusout(function () {
    $("." + mostraCaracteres).remove();
});

$(document).on("input", componentContCaracteres, function () {
    let limite = $(componentContCaracteres).attr("maxlength");
    let informativo = "caracteres restantes.";
    let caracteresDigitados = $(this).val().length;
    let caracteresRestantes = limite - caracteresDigitados;
    if (caracteresRestantes <= 0) {
        $(".mostra-caracteres").text("0 " + informativo);
    } else {
        $(".mostra-caracteres").text(caracteresRestantes + " " + informativo);
    }
});
// END - Adiciona um contador de caracteres aos campos com a Class="contador-caracteres"

function proximoModal(element) {
    var qtPaginas = $(element).find(".form-page").length;

    if (qtPaginas > 1) {
        var idPaginaAtual = $(element)
            .find(".form-page:not(.d-none)")
            .attr("id");

        var paginaAtual = $(element)
            .find(".form-page:not(.d-none)")
            .attr("id")
            .replace("page", "");

        var preenchido = true;

        $(element)
            .find("#page" + paginaAtual + " :input[required]")
            .each(function () {
                if ($(this).val() == "") {
                    $(this).focus();
                    preenchido = false;
                    return false;
                }
            });

        if (!preenchido) {
            swal(
                "Atenção!",
                "Você deve preencher todos os campos obrigatórios!",
                "warning"
            );

            return;
        }

        if ($(element).find("#page" + (Number(paginaAtual) + 1)).length >= 1) {
            $(element)
                .find("#" + idPaginaAtual)
                .addClass("d-none");
            $(element)
                .find("#page" + (Number(paginaAtual) + 1))
                .removeClass("d-none");
        }
    }
}

function anteriorModal(element) {
    var qtPaginas = $(element).find(".form-page").length;

    if (qtPaginas > 1) {
        var idPaginaAtual = $(element)
            .find(".form-page:not(.d-none)")
            .attr("id");

        var paginaAtual = $(element)
            .find(".form-page:not(.d-none)")
            .attr("id")
            .replace("page", "");

        if ($(element).find("#page" + (Number(paginaAtual) - 1)).length >= 1) {
            $(element)
                .find("#" + idPaginaAtual)
                .addClass("d-none");
            $(element)
                .find("#page" + (Number(paginaAtual) - 1))
                .removeClass("d-none");
        }
    }
}

//Multiple items inputs
function showInputMultiple(element) {
    $(element).addClass("d-none");
    $(element.parentNode).find("#txtInputMultiple").removeClass("d-none");
    $(element.parentNode).find("#txtInputMultiple").focus();

    // $("#" + element.parentNode.id + " > #divInputAutor").addClass('d-none');
    // $("#" + element.parentNode.id + " > #txtInputAutor").removeClass('d-none');

    // $("#" + element.parentNode.id + " > #txtInputAutor").focus();
}

function endInputMultiple(element) {
    $(element).addClass("d-none");
    $(element.parentNode).find("#divInputMultiple").removeClass("d-none");

    var inputValue = element.value;

    if (inputValue.indexOf(",") > 0) {
        var valores = inputValue.split(", ");

        valores.forEach((val) => {
            if (val.indexOf(", ") > 0) val = val.replace(", ", "");
            else val = val.replace(",", "");

            var novoValor =
                '<span class="tag-autor mr-2 p-1 px-3">' +
                '<span class="autor-name">' +
                val +
                "</span>" +
                '<button type="button" onclick="removerValor(this)" class="btn p-0 m-0 ml-1 text-white bg-transparent"><i class="far fa-times-circle"></i></button>' +
                "</span>";

            $(element.parentNode).find("#divInputMultiple").append(novoValor);
        });
    } else {
        var novoValor =
            '<span class="tag-autor mr-2 p-1 px-3">' +
            '<span class="autor-name">' +
            element.value +
            "</span>" +
            '<button type="button" onclick="removerValor(this)" class="btn p-0 m-0 ml-1 text-white bg-transparent"><i class="far fa-times-circle"></i></button>' +
            "</span>";

        $(element.parentNode).find("#divInputMultiple").append(novoValor);
    }

    element.value = "";

    AtualizarInputMultiple(element.parentNode);
}

function removerValor(element) {
    var divMain = element.parentNode.parentNode.parentNode;

    if ($(divMain).first().find(".autor-name").length == 1) {
        $(divMain).find("#divInputMultiple").addClass("d-none");
        $(divMain).find("#txtInputMultiple").removeClass("d-none");
    }

    $(element.parentNode).remove();

    AtualizarInputMultiple(divMain);

    if (!e) var e = window.event;
    e.cancelBubble = true;
    if (e.stopPropagation) e.stopPropagation();
}

function AtualizarInputMultiple(element) {
    if ($(element).find("#txtResultMultiple").length >= 1) {
        $(element).find("#txtResultMultiple").val("");

        var valores = [];

        $(element)
            .find("#divInputMultiple .autor-name")
            .each(function () {
                valores.push($(this).text());
            });

        $(element).find("#txtResultMultiple").val(JSON.stringify(valores));
    } else if (
        $(element.parentNode.parentNode.parentNode).find("#txtResultSumario")
            .length >= 1
    ) {
        var divItensSumario = element.parentNode.parentNode.parentNode;

        $(divItensSumario).find("#txtResultSumario").val();

        var sumario = [];

        $(divItensSumario)
            .find(".item-sumario")
            .each(function (index) {
                var autores = [];

                $(this)
                    .find(".autores .input-autor .autor-name")
                    .each(function (index2) {
                        autores.push($(this).text());
                    });

                var palavras = [];

                $(this)
                    .find(".palavras .input-autor .autor-name")
                    .each(function (index2) {
                        palavras.push($(this).text());
                    });

                sumario.push({
                    titulo: $(this).find("#txtTituloItemSumario").val(),
                    autores: autores,
                    palavras: palavras,
                    pagina: $(this).find("#txtPaginaItemSumario").val(),
                });
            });

        $(divItensSumario)
            .find("#txtResultSumario")
            .val(JSON.stringify(sumario));
    }
}

function confirmLogout() {
    swal({
        title: "Saindo",
        text: "Deseja sair da plataforma?",
        icon: "warning",
        buttons: ["Voltar", "Sair"],
        dangerMode: true,
    }).then((willLogout) => {
        if (willLogout) {
            window.location.href = "/multiunidades/logout";
        }
    });
}

function mudouArquivoCapa(input) {
    if (
        input.accept
            .toString()
            .indexOf(
                input.value.substring(input.value.length - 3).toLowerCase()
            ) < 0
    ) {
        input.value = null;
        swal("Atenção!", "Selecione um arquivo do tipo correto!", "warning");
    }

    var imgIcon = "";

    if (input.id.indexOf("capa") >= 0) {
        imgIcon =
            '<i class="far fa-image fa-2x text-darkmode mr-2" style="vertical-align:sub;"></i>';
    }

    if (input.value != null && input.value != "") {
        $("#" + input.parentNode.id + " #placeholder").addClass("d-none");
        $("#" + input.parentNode.id + " #file-name").html(
            imgIcon + input.value.split(/(\\|\/)/g).pop()
        );
        $("#" + input.parentNode.id + " #file-name").removeClass("d-none");
    } else {
        $(input.parentNode).css("background", "var(--primary-color)");
        $("#" + input.parentNode.id + " #placeholder").removeClass("d-none");
        $("#" + input.parentNode.id + " #file-name").addClass("d-none");
    }

    if (input.id.indexOf("capa") >= 0) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $(input.parentNode).attr(
                    "style",
                    "color:white; background: url('" +
                        e.target.result +
                        "');background-size: contain;background-position: 50% 50%;background-repeat: no-repeat;"
                );
            };

            reader.readAsDataURL(input.files[0]);
        }
    }
}

function mudouArquivoInput(input, limitUpload = 0) {
    // if(input.accept.toString().indexOf(input.value.substring(input.value.length - 3).toLowerCase()) < 0)
    // {
    //     input.value = null;
    //     swal("Ops!", "Selecione um arquivo do tipo correto!", "warning");
    // }

    if (limitUpload > 0 && input.files.length > 0 && input.files[0].size > limitUpload) {
        swal("Arquivo muito grande!", "Seu arquivo passou do limite de upload.", "warning");
        return
    }

    if (input.value != null && input.value != "") {
        $(input.parentNode)
            .find(".file-name")
            .text(input.value.split(/(\\|\/)/g).pop());
    } else {
        $(input.parentNode).find(".file-name").text("Selecionar arquivo");
    }
}

function enviouArquivo(input) {
    if (
        input.accept
            .toString()
            .indexOf(
                input.value.substring(input.value.length - 3).toLowerCase()
            ) < 0
    ) {
        input.value = null;
        swal("", "Selecione um arquivo do tipo correto!", "warning");
    }

    if (input.value != null && input.value != "") {
        $(input.parentNode).find("#placeholder").addClass("d-none");
        $(input.parentNode).find(".file-name").removeClass("d-none");
        $(input.parentNode)
            .find(".file-name")
            .text(input.value.split(/(\\|\/)/g).pop());
    } else {
        $(input.parentNode).find(".file-name").addClass("d-none");
        $(input.parentNode).find("#placeholder").removeClass("d-none");
    }
}

function excluirNotificacao(id) {
    $.ajax({
        url: appurl + "/notificacao/" + id + "/excluir",
        type: "get",
        dataType: "json",
        success: function (_response) {
            if (_response.success != null) {
                if (id == "todas") {
                    $(".box-notificacao").remove();
                } else {
                    $("#divNotificacao" + id).remove();
                }

                if (parseInt($("#lblQtNotificacoes").text()) > 1) {
                    $("#lblQtNotificacoes").text(
                        parseInt($("#lblQtNotificacoes").text()) - 1
                    );
                } else {
                    $("#lblQtNotificacoes").addClass("d-none");
                }

                if ($("#divNotificacoes .dropdown-item").length == 0) {
                    $("#divNotificacoes")
                        .append(`<div class="dropdown-item px-4 py-3" style="color: #60748A;min-width:  340px;border-bottom:  2px solid #E3E5F0;">
                            Você não possui notificações.
                        </div>`);
                }
            }
        },
        error: (err) => {},
    });
}

function toggleSideMenu() {
    $("#nav-icon3").toggleClass("open");

    if ($(".sidebar").hasClass("show")) {
        document
            .querySelector("#nav-icon3 > i")
            .classList.replace("fa-times", "fa-bars");

        $(".sidebar").animate(
            { left: -$(".sidebar").outerWidth() },
            300,
            function () {
                $(".sidebar").removeClass("show").addClass("hide");
            }
        );
    } else {
        document
            .querySelector("#nav-icon3 > i")
            .classList.replace("fa-bars", "fa-times");

        $(".sidebar").removeClass("hide").addClass("show");
        $(".sidebar").animate(
            {
                left: "0px",
            },
            300,
            function () {}
        );
    }
}

$("html").click(function (event) {
    if ($(event.target).closest(".sidebar, #nav-icon3").length === 0) {
        $(".sidebar").animate(
            { left: -$(".sidebar").outerWidth() },
            300,
            function () {
                $(".sidebar").removeClass("show").addClass("hide");
                $("#nav-icon3").removeClass("open");
                const icon = document.querySelector("#nav-icon3 > i");
                if (icon) {
                    icon.classList.replace("fa-times", "fa-bars");
                }
            }
        );
    }
});

function mostrarBarraPesquisa() {
    if ($("#txtPesquisaPrincipal").hasClass("d-none")) {
        $("#txtPesquisaPrincipal").removeClass("d-none");
    } else {
        $("#txtPesquisaPrincipal").addClass("d-none");

        $("#formPesquisar").submit();
    }
}

function findValueWhere(_array, _match, _needle) {
    for (var i = 0; i < _array.length; i++) {
        if (_array[i][_match] == _needle) {
            return _array[i];
        }
    }
}

function showCodigoAula() {
    if (!$(".sidebar").hasClass("show")) {
        toggleSideMenu();
    }

    $(".sidebar #lblInserirCodigoAula").addClass("d-none");

    $(".sidebar #formInserirCodigoAula").removeClass("d-none");

    $(".sidebar [name='codigo']").focus();
}

function updateSelectPicker() {
    $(".selectpicker").selectpicker("refresh");
}

/**
 * Redireciona o usuário com parâmetros da URL
 *
 * Exemplo: { pesquisa: 'valor a ser pesquisado' }
 * Resultado: Troca a URL e adiciona ou troca 'pesquisa' dos parâmetros da query
 *
 * @param Object
 * @return Redirect
 */
function reloadWithQueryStringVars(queryStringVars) {
    var existingQueryVars = location.search
            ? location.search.substring(1).split("&")
            : [],
        currentUrl = location.search
            ? location.href.replace(location.search, "")
            : location.href,
        newQueryVars = {},
        newUrl = currentUrl + "?";
    if (existingQueryVars.length > 0) {
        for (var i = 0; i < existingQueryVars.length; i++) {
            var pair = existingQueryVars[i].split("=");
            newQueryVars[pair[0]] = pair[1];
        }
    }
    if (queryStringVars) {
        for (var queryStringVar in queryStringVars) {
            newQueryVars[queryStringVar] = queryStringVars[queryStringVar];
        }
    }
    if (newQueryVars) {
        for (var newQueryVar in newQueryVars) {
            newUrl += newQueryVar + "=" + newQueryVars[newQueryVar] + "&";
        }
        newUrl = newUrl.substring(0, newUrl.length - 1);
        window.location.href = newUrl;
    } else {
        window.location.href = location.href;
    }
}

/**
 * Carrega todos os ciclos do sistema.
 *
 * @param $target Elemento (select) a ser preenchido. Ex: #selectInput
 *
 * @return UI_Update
 */
function loadCiclo($target) {
    $.get("/v2/api/domains/list?type=ciclo", function (response) {
        var defaultValue = $($target).attr("default-value");
        var callback = $($target).attr("callback");

        if (defaultValue) {
            loadCicloEtapa('[data-api-list="ciclo_etapas"]', defaultValue);
        }

        $($target)
            .unbind()
            .on("change", function () {
                var ciclosParams = [];

                $(this)
                    .find("option:selected")
                    .each(function (i, e) {
                        ciclosParams.push(e.value);
                    });

                loadCicloEtapa(
                    '[data-api-list="ciclo_etapas"]',
                    ciclosParams.join(",")
                );
                loadDisciplina('[data-api-list="disciplinas"]', "");
            });

        return updateList($target, response.data);
    });
}

/**
 * Carrega todos os ciclo_etapas do sistema.
 *
 * @param $target Elemento (select) a ser preenchido. Ex: #selectInput
 * @param $ciclo_id ID do ciclo a ser buscado (opcional)
 *
 * @return UI_Update
 */
function loadCicloEtapa($target, $ciclo_id) {
    var url = "/v2/api/domains/list?type=ciclo_etapa";

    if (typeof $ciclo_id !== "undefined") {
        url += "&ciclo_id=" + $ciclo_id;
    }

    $.get(url, function (response) {
        var defaultValue = $($target).attr("default-value");

        if (defaultValue) {
            loadDisciplina('[data-api-list="disciplinas"]', defaultValue);
        }

        $($target)
            .unbind()
            .on("change", function () {
                var cicloEtapasParams = [];

                $(this)
                    .find("option:selected")
                    .each(function (i, e) {
                        cicloEtapasParams.push(e.value);
                    });

                loadDisciplina(
                    '[data-api-list="disciplinas"]',
                    cicloEtapasParams.join(",")
                );
            });

        return updateList($target, response.data);
    });
}

/**
 * Carrega todas as disciplinas do sistema.
 *
 * @param $target Elemento (select) a ser preenchido. Ex: #selectInput
 * @param $ciclo_etapa_id ID do ciclo_etapa a ser buscado (opcional)
 *
 * @return UI_Update
 */
function loadDisciplina($target, $ciclo_etapa_id) {
    var url = "/v2/api/domains/list?type=disciplinas";

    if (typeof $ciclo_etapa_id !== "undefined") {
        url += "&ciclo_etapa_id=" + $ciclo_etapa_id;
    }

    $.get(url, function (response) {
        return updateList($target, response.data);
    });
}

/**
 * Atualiza a lista de um elemento com os títulos do array
 * recebido.
 *
 * @param target Elemento (select) a ser preenchido. Ex: #selectInput
 * @param list Array com a lista (os elementos do array devem possuir titulo)
 * @param defaultOption Ao atualizar a lista isso indica se deve haver um valor padrão ou não
 *
 * @return UI_Update
 */
function updateList(target, $list) {
    var $value = $(target).attr("default-value");

    if (!$(target).hasClass("selectpicker")) {
        $(target).html(
            `<option value="" selected="true" disabled="disabled">Selecione</option>`
        );
    } else {
        $(target).html(``);
    }

    if ($list.length) {
        $list.forEach(function (item) {
            $(target).append(
                `<option value="${item.id}">${item.titulo}</option>`
            );
        });
    }

    if ($value) {
        $(target).val($value);
    }

    $(".selectpicker").selectpicker("refresh");
}

function changeCicloEscola() {
    // $("[name='cicloetapa[]']").prop('disabled', false);
    // $("[name='disciplina[]']").prop('disabled', true);
    // $("[name='disciplina[]']").val('');
}

function changeCicloEtapaEscola() {
    // $("[name='disciplina[]']").prop('disabled', false);
}

/**
 *
 */
function setPredefinedOptions() {
    $(
        '[data-api-list="etapas"], [data-api-list="ciclo_etapas"], [data-api-list="disciplinas"]'
    ).each(function (item, el) {
        $(el).html(
            `<option value="" selected="true" disabled="disabled">Selecione</option>`
        );
    });
}

$(function () {
    loadCiclo('[data-api-list="etapas"]');
    setPredefinedOptions();

    // loadDisciplina('[data-api-list="disciplinas"]');

    /**
     * Dropdown Toolz
     */
    $(".dropdown-tz").on("click", function () {
        $(".dropdown-list-tz").removeClass("show");
        $(this).find(".dropdown-list-tz").addClass("show");
    });

    $(document).on("click", function (e) {
        if (!$(e.target).closest(".dropdown-tz, .dropdown-list-tz").length) {
            $(".dropdown-list-tz").removeClass("show");
        }
    });
});

function loadListApiParam(target, api) {
    const url = api;

    $.get(url, function (result) {
        if (result) {
            result.data.forEach(function (item, index) {
                let combo = target;
                let opt = document.createElement("option");
                opt.value = item.id;
                opt.text = item.title;
                //  == undefined ? opt.text = item.title : opt.text = item.titulo;
                console.warn(opt.text);
                combo.add(opt, combo.options[index]);
            });
        } else {
            $($target).append(
                `<option value=''>Nenhum registro encontrado</option>`
            );
        }
    });
}
